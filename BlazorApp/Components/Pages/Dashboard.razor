@page "/dashboard"
@using BlazorApp.Models
@using BlazorApp.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BlazorApp.Data.BlazorAppContext> DbFactory

<PageTitle>Dashboard</PageTitle>

<div class="dashboard-container">
    <!-- Left Section -->
    <div class="dashboard-left">
        <h3>Select an account to view</h3>
        <!-- Dropdown menu -->
        <div class="dropdown-container">
            <select @onchange="OnAccountSelected" class="account-dropdown">
                @foreach (var account in BankAccounts)

                {
                    <option value="@account.BankAccountId">@account.AccountType - Balance: @account.AccountBalance</option>
                }
            </select>
        </div>

        <!-- Toggle Switch -->
        <div class="toggle-switch">
            <input type="checkbox" id="toggleView" class="toggle-checkbox" @onchange="OnToggleSwitchChange">
            <label for="toggleView" class="toggle-label">
                <span class="toggle-switch-text" data-view="list">List View</span>
                <span class="toggle-switch-text" data-view="graphical">Graphical View</span>
            </label>
        </div>
    </div>

    <!-- Right Section -->
    <div class="dashboard-right">
        <!-- Content of the right section -->
        <h3>@(SelectedAccount?.AccountType != null ? $"Account Details for {SelectedAccount?.AccountType}" : TransactionsForAccountZero?.Any() == true ? "" : "No Account Selected")</h3>

        <!-- Display transactions-->
        <h4>Transactions:</h4>
        @if (TransactionsForAccountZero?.Any() ?? false)

        {
            <div class="transactions-container">
                @foreach (var transaction in TransactionsForAccountZero)

                {
                    <div class="transaction-box">
                        <div class="transaction-icon">
                            <span>&#8644;</span> <!-- Arrows -->
                        </div>
                        <div class="transaction-details">
                            <div class="transaction-date">@transaction.TransactionDate.ToShortDateString()</div>
                            <div class="transaction-merchant">To: @transaction.Merchant</div>
                            <div class="transaction-amount"> $@transaction.TransactionAmount</div>
                        </div>
                    </div>
                }
            </div>

        }

        else

        {
            <p>No transactions available for Account ID 0.</p>
        }
    </div>
</div>

@code {
    private List<BankAccount> BankAccounts { get; set; } = new();

    private BankAccount? SelectedAccount { get; set; }

    private List<Transaction> TransactionsForAccountZero { get; set; } = new(); // New list for transactions of AccountID 0

    private int currentUserId = 0; // Placeholder, replace with actual user ID when login implemented.



    protected override async Task OnInitializedAsync()

    {

        await LoadBankAccountsForUser();

        await LoadTransactionsForAccountZero(); // Load transactions for AccountID 0

    }



    private async Task LoadBankAccountsForUser()

    {

        using var context = DbFactory.CreateDbContext();



        // Fetch accounts for the user with ID = 0

        BankAccounts = await context.BankAccount

            .Where(account => account.UserAccountId == currentUserId)

            .ToListAsync();

    }



    private async Task LoadTransactionsForAccountZero()

    {

        using var context = DbFactory.CreateDbContext();



        // Fetch transactions specifically for AccountID 0

        TransactionsForAccountZero = await context.Transaction

            .Where(transaction => transaction.AccountId == 0)

            .ToListAsync();

    }



    private void OnAccountSelected(ChangeEventArgs e)

    {

        if (int.TryParse(e.Value.ToString(), out int accountId))

        {

            SelectedAccount = BankAccounts.FirstOrDefault(account => account.BankAccountId == accountId);

        }

    }



    private void OnToggleSwitchChange(ChangeEventArgs e)

    {

        bool isToggled = (bool)e.Value;

        // Implement the logic based on the toggle switch state

    }
}
