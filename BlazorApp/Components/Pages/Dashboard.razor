@page "/dashboard"
@using BlazorApp.Models
@using BlazorApp.Data
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject IDbContextFactory<BlazorApp.Data.BlazorAppContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Dashboard</PageTitle>

<div class="dashboard-container">
    <!-- Left Section -->
    <div class="dashboard-left">
        <h3>Select an account to view</h3>
        <!-- Dropdown menu -->
        <div class="dropdown-container">
            <select @onchange="OnAccountSelected" class="account-dropdown" value="@SelectedAccount?.BankAccountId">
                @foreach (var account in BankAccounts)
                {
                    <option value="@account.BankAccountId">@account.AccountType - Balance: @account.AccountBalance</option>
                }
            </select>
        </div>

        <!-- Toggle Switch -->
        <div class="toggle-switch">
            <input type="checkbox" id="toggleView" class="toggle-checkbox" @onchange="OnToggleSwitchChange">
            <label for="toggleView" class="toggle-label">
                <span class="toggle-switch-text" data-view="list">List View</span>
                <span class="toggle-switch-text" data-view="graphical">Graphical View</span>
            </label>
        </div>
    </div>

    <!-- Right Section -->
    <div class="dashboard-right">
        <h3>@(SelectedAccount != null ? $"Account Details for {SelectedAccount.AccountType}" : "No Account Selected")</h3>
        <h4>Transactions:</h4>

        @if (Transactions.Any())
        {
            <div class="transactions-container">
                @foreach (var transaction in Transactions)
                {
                    <div class="transaction-box">
                        <div class="transaction-icon">
                            <span>&#8644;</span> <!-- Arrows icon for transaction -->
                        </div>
                        <div class="transaction-details">
                            <div class="transaction-date">@transaction.TransactionDate.ToShortDateString()</div>
                            <div class="transaction-merchant">To: @transaction.Merchant</div>
                            <div class="transaction-amount">$@transaction.TransactionAmount</div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No transactions available for the selected account.</p>
        }

        <!-- Pagination Component -->
        <Pagination ActivePageNumber="@currentPageNumber"
                    TotalPages="@TotalPages"
                    DisplayPages="5"
                    FirstLinkIcon="IconName.ChevronDoubleLeft"
                    PreviousLinkIcon="IconName.ChevronLeft"
                    NextLinkIcon="IconName.ChevronRight"
                    LastLinkIcon="IconName.ChevronDoubleRight"
                    PageChanged="OnPageChangedAsync" />


    </div>
</div>

@code {
    private List<BankAccount> BankAccounts { get; set; } = new();
    private BankAccount? SelectedAccount { get; set; }
    private List<Transaction> Transactions { get; set; } = new();

    private const int TransactionsPerPage = 5;
    int currentPageNumber = 1;
    private int TotalPages { get; set; }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { currentPageNumber = newPageNumber; 
        });
        await LoadTransactionsForSelectedAccount();
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userEmail = user.FindFirst(ClaimTypes.Name)?.Value;
            if (!string.IsNullOrEmpty(userEmail))
            {
                await LoadBankAccountsForUser(userEmail);
            }
        }
    }

    private async Task LoadBankAccountsForUser(string email)
    {
        using var context = DbFactory.CreateDbContext();
        var userAccount = await context.UserAccount.FirstOrDefaultAsync(u => u.Email == email);

        if (userAccount != null)
        {
            BankAccounts = await context.BankAccount
                .Where(account => account.UserAccountId == userAccount.UserAccountId)
                .ToListAsync();

            if (BankAccounts.Any())
            {
                SelectedAccount = BankAccounts.First();
                await LoadTransactionsForSelectedAccount();
            }
        }
    }

    private async Task LoadTransactionsForSelectedAccount()
    {
        Transactions.Clear();
        if (SelectedAccount != null)
        {
            using var context = DbFactory.CreateDbContext();

            var totalTransactions = await context.Transaction
                .CountAsync(t => t.AccountId == SelectedAccount.BankAccountId);
            TotalPages = (int)Math.Ceiling((double)totalTransactions / TransactionsPerPage);

            Transactions = await context.Transaction
                .Where(t => t.AccountId == SelectedAccount.BankAccountId)
                .OrderByDescending(t => t.TransactionDate)
                .Skip((currentPageNumber - 1) * TransactionsPerPage)
                .Take(TransactionsPerPage)
                .ToListAsync();
        }

        StateHasChanged();
    }

    private async void OnAccountSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int accountId))
        {
            SelectedAccount = BankAccounts.FirstOrDefault(account => account.BankAccountId == accountId);
            currentPageNumber = 1; // Reset to first page on account change
            await LoadTransactionsForSelectedAccount();
        }
    }

    private void OnToggleSwitchChange(ChangeEventArgs e)
    {
        bool isToggled = (bool)e.Value;
        // Implement the logic based on the toggle switch state
    }
}