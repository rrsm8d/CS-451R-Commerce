@page "/dashboard"
@using BlazorApp.Models
@using BlazorApp.Data
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject IDbContextFactory<BlazorApp.Data.BlazorAppContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Dashboard</PageTitle>

<div class="dashboard-container">
    <!-- Left Section -->
    <div class="dashboard-left">
        <h3>Select an account to view</h3>
        <!-- Dropdown menu -->
        <div class="dropdown-container">
            <select @onchange="OnAccountSelected" class="account-dropdown" value="@SelectedAccount?.BankAccountId">
                @foreach (var account in BankAccounts)
                {
                    <option value="@account.BankAccountId">@account.AccountType - Balance: @account.AccountBalance</option>
                }
            </select>
        </div>

        <!-- Toggle Switch -->
        <div class="toggle-switch">
            <input type="checkbox" id="toggleView" class="toggle-checkbox" @onchange="OnToggleSwitchChange">
            <label for="toggleView" class="toggle-label">
                <span class="toggle-switch-text" data-view="list">List View</span>
                <span class="toggle-switch-text" data-view="graphical">Graphical View</span>
            </label>
        </div>
    </div>

    <!-- Right Section -->
    <div class="dashboard-right">

        <div style="@(!isListView ? "display: none;" : "display: block;")">
            <h3>@(SelectedAccount != null ? $"Account Details for {SelectedAccount.AccountType}" : "No Account Selected")</h3>
            <h4>Transactions:</h4>

            @if (Transactions.Any())
            {
                <div class="transactions-container">
                    @foreach (var transaction in Transactions)
                    {
                        <div class="transaction-box">
                            <div class="transaction-icon">
                                <span>&#8644;</span> <!-- Arrows icon for transaction -->
                            </div>
                            <div class="transaction-details">
                                <div class="transaction-date">@transaction.TransactionDate.ToShortDateString()</div>
                                <div class="transaction-merchant">To: @transaction.Merchant</div>
                                <div class="transaction-amount">$@transaction.TransactionAmount</div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>No transactions available for the selected account.</p>
            }

            <!-- Pagination Component -->
            <Pagination ActivePageNumber="@currentPageNumber"
            TotalPages="@TotalPages"
            DisplayPages="5"
            FirstLinkIcon="IconName.ChevronDoubleLeft"
            PreviousLinkIcon="IconName.ChevronLeft"
            NextLinkIcon="IconName.ChevronRight"
            LastLinkIcon="IconName.ChevronDoubleRight"
            PageChanged="OnPageChangedAsync" />

        </div>

        <div class="bargraph-container" style="@(!isListView ? "display: flex;" : "display: none;")">
            <BarChart @ref="barChart" Width="1000" Height="800"/>
        </div>

    </div>
</div>

@code {
    private List<BankAccount> BankAccounts { get; set; } = new();
    private BankAccount? SelectedAccount { get; set; }
    private List<Transaction> AllTransactions { get; set; } = new();
    private List<Transaction> Transactions { get; set; } = new();

    private const int TransactionsPerPage = 5;
    int currentPageNumber = 1;
    private int TotalPages { get; set; }

    private bool isListView = true;

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { currentPageNumber = newPageNumber; 
        });
        await LoadTransactionsForSelectedAccount();
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userEmail = user.FindFirst(ClaimTypes.Name)?.Value;
            if (!string.IsNullOrEmpty(userEmail))
            {
                await LoadBankAccountsForUser(userEmail);
            }
        }

        /* BAR GRAPH */
        chartData = new ChartData { Labels = GetDefaultDataLabels(12), Datasets = GetDefaultDataSets(1) };
        barChartOptions = new BarChartOptions { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };    
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        /* BAR GRAPH */
        await LoadTransactionsForSelectedAccount(); // Why does the transactions keep getting set to null. And why do I need to keep refreshing it
        if (firstRender)
        {
            chartData = new ChartData { Labels = GetDefaultDataLabels(12), Datasets = GetDefaultDataSets(1) };
            barChartOptions = new BarChartOptions { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task LoadBankAccountsForUser(string email)
    {
        using var context = DbFactory.CreateDbContext();
        var userAccount = await context.UserAccount.FirstOrDefaultAsync(u => u.Email == email);

        if (userAccount != null)
        {
            BankAccounts = await context.BankAccount
                .Where(account => account.UserAccountId == userAccount.UserAccountId)
                .ToListAsync();

            if (BankAccounts.Any())
            {
                SelectedAccount = BankAccounts.First();
                await LoadTransactionsForSelectedAccount();
            }
        }
    }

    private async Task LoadTransactionsForSelectedAccount()
    {
        if (SelectedAccount != null)
        {
            using var context = DbFactory.CreateDbContext();

            var totalTransactions = await context.Transaction
                .CountAsync(t => t.AccountId == SelectedAccount.BankAccountId);
            TotalPages = (int)Math.Ceiling((double)totalTransactions / TransactionsPerPage);
            AllTransactions = await context.Transaction
                .Where(t => t.AccountId == SelectedAccount.BankAccountId)
                .OrderByDescending(t => t.TransactionDate)
                .ToListAsync();
            Transactions = await context.Transaction
                .Where(t => t.AccountId == SelectedAccount.BankAccountId)
                .OrderByDescending(t => t.TransactionDate)
                .Skip((currentPageNumber - 1) * TransactionsPerPage)
                .Take(TransactionsPerPage)
                .ToListAsync();
        }

        StateHasChanged();
    }

    private async void OnAccountSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int accountId))
        {
            SelectedAccount = BankAccounts.FirstOrDefault(account => account.BankAccountId == accountId);
            currentPageNumber = 1; // Reset to first page on account change
            await LoadTransactionsForSelectedAccount();
            chartData = new ChartData { Labels = GetDefaultDataLabels(12), Datasets = GetDefaultDataSets(1) };
            barChartOptions = new BarChartOptions { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };
            await barChart.UpdateAsync(chartData, barChartOptions);
        }
    }

    private void OnToggleSwitchChange(ChangeEventArgs e)
    {
        isListView = !(bool)e.Value!;
        return;
    }


    /* BAR GRAPH CODE */
    private BarChart barChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;

    private int datasetsCount = 1;
    private int labelsCount = 12;
    private string[] months = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
    private Random random = new();

    private async Task AddDatasetAsync()
    {
        if (chartData is null || chartData.Datasets is null) return;

        if (datasetsCount >= 12)
            return;

        var chartDataset = GetRandomBarChartDataset();
        chartData = await barChart.AddDatasetAsync(chartData, chartDataset, barChartOptions);
    }

    private async Task ShowHorizontalBarChartAsync()
    {
        barChartOptions.IndexAxis = "y";
        await barChart.UpdateAsync(chartData, barChartOptions);
    }

    private async Task ShowVerticalBarChartAsync()
    {
        barChartOptions.IndexAxis = "x";
        await barChart.UpdateAsync(chartData, barChartOptions);
    }

    #region Data Preparation

    private List<IChartDataset> GetDefaultDataSets(int numberOfDatasets)
    {
        var datasets = new List<IChartDataset>();

        for (var index = 0; index < numberOfDatasets; index++)
        {
            datasets.Add(GetTransactionBarChartDataset());
        }
        return datasets;
    }

    private BarChartDataset GetRandomBarChartDataset()
    {
        var c = ColorUtility.CategoricalTwelveColors[datasetsCount].ToColor();

        datasetsCount += 1;

        return new BarChartDataset()
            {
                Label = $"{SelectedAccount.AccountType}",
                Data = GetTransactionData(),
                BackgroundColor = new List<string> { c.ToRgbString() },
                BorderColor = new List<string> { c.ToRgbString() },
                BorderWidth = new List<double> { 0 },
            };
    }

    private List<double?> GetRandomData()
    {
        var data = new List<double?>();
        for (var index = 0; index < labelsCount; index++)
        {
            data.Add(random.Next(200));
        }

        return data;
    }

    private List<string> GetDefaultDataLabels(int numberOfLabels)
    {
        if(numberOfLabels > 12) {
            numberOfLabels = 12;
        } else if (numberOfLabels <= 0) {
            numberOfLabels = 1;
        }
        var labels = new List<string>();
        for (var index = 0; index < numberOfLabels; index++)
        {
            labels.Add(months[index]);
        }

        return labels;
    }

    private BarChartDataset GetTransactionBarChartDataset()
    {
        var c = ColorUtility.CategoricalTwelveColors[datasetsCount].ToColor();

        return new BarChartDataset()
            {
                Label = $"{SelectedAccount.AccountType}",
                Data = GetTransactionData(),
                BackgroundColor = new List<string> { c.ToRgbString() },
                BorderColor = new List<string> { c.ToRgbString() },
                BorderWidth = new List<double> { 0 },
            };
    }

    private List<double?> GetTransactionData()
    {
        List<double?> data;
        // Initialize the dictionary with months as keys and 0 as default values
        var monthSums = months.ToDictionary(month => month, month => (double?)null);
        // Group transactions by month
        foreach (var transaction in AllTransactions)
        {
            var monthName = months[transaction.TransactionDate.Month - 1]; // Month is 1-based
            if (monthSums[monthName] == null)
            {
                monthSums[monthName] = (double) transaction.TransactionAmount; // Initialize with the transaction amount
            }
            else
            {
                monthSums[monthName] += (double) transaction.TransactionAmount; // Add to the existing sum
            }
        }
        data = monthSums.Values.ToList();

        return data;
    }


    #endregion Data Preparation
}
}