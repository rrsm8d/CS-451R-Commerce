@page "/login"
@inject IDbContextFactory<BlazorApp.Data.BlazorAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<div class="login-container">

    <h1>Login</h1>

    <p>Welcome back! Please log in to access your account.</p>

    <EditForm method="post" class="login-form" Model="LoginViewModel" OnValidSubmit="AuthenticateUser" FormName="login" id="login" Enhance>
        <AntiForgeryToken />
        <fieldset class="input-field">
            <InputText class="input-box form-control" type="email" id="email" placeholder="Enter your email" @bind-Value="LoginViewModel.Email" required />
            <InputText class="input-box form-control" type="password" id="password" placeholder="Enter a password" @bind-Value="LoginViewModel.Password" required />
        </fieldset>
    </EditForm>

    <div class="button-container">
        <button class="btn btn-primary login-button" type="submit" form="login">Login!</button>
        <a href="/signup" class="btn btn-primary signup-button" type="button">New user? Sign up!</a>
        <div class="forgot-password-container">
        <a href="/Recovery" class="forgot-password-link">Forgot Password?</a>
    </div>
    </div>

</div>

@code {
    // https://www.youtube.com/watch?v=GKvEuA80FAE
    // A viewmodel entirely for the purpose of pulling data from the user. Made so the password can be grabbed first before submission, and the date can also be set before submission
    [SupplyParameterFromForm]
    public LoginViewModel LoginViewModel { get; set; } = new();

    // Will temporarily store the hash of the LoginViewModel's password before verifying later
    private readonly PasswordHasher<UserAccount> _passwordHasher = new();
    private string? errorMessage = string.Empty;

    [CascadingParameter]
    public HttpContext? HttpContext{ get; set; }

    private async Task AuthenticateUser()
    {
        using var context = DbFactory.CreateDbContext();
        // FIND the account with the provided email.
        // Uhhh maybe I should update the UserAccount model to also make email a unique primary key.
        var userAccount = context.UserAccount.Where(x => x.Email == LoginViewModel.Email).FirstOrDefault();
        // Does the account not exist, or does the hash not exist?
        if (userAccount == null || (_passwordHasher.VerifyHashedPassword(userAccount, userAccount.PasswordHash, LoginViewModel.Password)) == PasswordVerificationResult.Failed)
        {
            errorMessage = "Invalid email or password";
            return;
        }

        // If it's valid
        // Give the cookies some claims which will help us later when identifying the user
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, LoginViewModel.Email),
            new Claim(ClaimTypes.Role, userAccount.FirstName),
            // We can use this NameIdentifier claim to get the user's ID later in the application. 
            new Claim(ClaimTypes.NameIdentifier, userAccount.UserAccountId.ToString()) // Had to convert to string. Not sure how else to store it.
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal); 
        // User auth complete, now redir to dashboard
        NavigationManager.NavigateTo("/dashboard");
    }
}
