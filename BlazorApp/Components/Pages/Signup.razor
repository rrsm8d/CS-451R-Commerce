@page "/signup"
@inject IDbContextFactory<BlazorApp.Data.BlazorAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Signup</PageTitle>

<div class="signup-container">

    <h1>Signup</h1>

    <p style="text-align: center;">
        New here? Create a new account! <br />
        <b>(Passwords must be at least 8 characters in length)</b>
    </p>

    <!--
        It seems that using Blazor HTML components, such as EditForm and InputText, end up breaking the isolated css styles.
        This was fixed by following https://stackoverflow.com/questions/65890644/css-isolation-in-blazor-doesnt-work-with-predefined-form-elements
        tl;dr: The easy solution is just adding the styles in a <style> tag here, add a ::deep before the class, or write into app.css (not recommended tbh)
    -->

    <EditForm method="post" class="signup-form" Model="UserAccount" OnValidSubmit="AddUserAccount" FormName="create" id="create" Enhance>
        <fieldset class="input-field">
            <InputText class="input-box form-control" type="email" id="email" placeholder="Enter your email" @bind-Value="UserAccount.Email" required />
            <InputText class="input-box form-control" type="password" id="password" placeholder="Enter a password" @bind-Value="UserAccount.PasswordHash" required />
            <InputText class="input-box form-control" type="password" id="passwordretry" placeholder="Re-enter password [Not finished]" @bind-Value="UserAccount.PasswordHash" required />
            <!--TO-DO: Add a little eye button to reveal password [Optional idk lol]-->
            <InputText class="input-box form-control" type="text" id="fname" placeholder="First name" @bind-Value="UserAccount.FirstName" required />
            <InputText class="input-box form-control" type="text" id="lname" placeholder="Last name" @bind-Value="UserAccount.LastName" required />
        </fieldset>
    </EditForm>

    <div class="button-container">
        <button class="btn btn-primary signup-button" type="submit" form="create">Signup!</button>
        <a href="/login" class="btn btn-primary login-button" type="button">Back to login</a>
    </div>

</div>

<!--TO-DO: Require users to re-enter their password-->
<!--TO-DO: Add basic regex to better check for valid emails, add character limits to other fields.-->

@code {
    [SupplyParameterFromForm]
    private UserAccount UserAccount { get; set; } = new();

    // Requires Microsoft.AspNetCore.Identity
    // This apparently handles salting for us already? I don't understand, but I welcome it.
    private readonly PasswordHasher<UserAccount> _passwordHasher = new();

    private async Task AddUserAccount()
    {
        // Hash the password
        UserAccount.PasswordHash = _passwordHasher.HashPassword(UserAccount, UserAccount.PasswordHash);
        // Set the date
        UserAccount.CreationDate = DateTime.Now;

        // Access the DB context
        using var context = DbFactory.CreateDbContext();

        // Create the entity
        context.UserAccount.Add(UserAccount);
        await context.SaveChangesAsync();

        // Move the user somewhere else
        NavigationManager.NavigateTo("/login"); 
    }
}
