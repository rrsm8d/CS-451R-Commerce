@page "/transactions/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorApp.Models
@inject IDbContextFactory<BlazorApp.Data.BlazorAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Transaction</h2>
<hr />
@if (Transaction is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Transaction" OnValidSubmit="UpdateTransaction" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Transaction.TransactionId" value="@Transaction.TransactionId" />
                <div class="mb-3">
                    <label for="accountid" class="form-label">AccountId:</label>
                    <InputNumber id="accountid" @bind-Value="Transaction.AccountId" class="form-control" />
                    <ValidationMessage For="() => Transaction.AccountId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="transactionamount" class="form-label">TransactionAmount:</label>
                    <InputNumber id="transactionamount" @bind-Value="Transaction.TransactionAmount" class="form-control" />
                    <ValidationMessage For="() => Transaction.TransactionAmount" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="transactiondate" class="form-label">TransactionDate:</label>
                    <InputDate id="transactiondate" @bind-Value="Transaction.TransactionDate" class="form-control" />
                    <ValidationMessage For="() => Transaction.TransactionDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="merchant" class="form-label">Merchant:</label>
                    <InputText id="merchant" @bind-Value="Transaction.Merchant" class="form-control" />
                    <ValidationMessage For="() => Transaction.Merchant" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="startdate" class="form-label">StartDate:</label>
                    <InputDate id="startdate" @bind-Value="Transaction.StartDate" class="form-control" />
                    <ValidationMessage For="() => Transaction.StartDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="enddate" class="form-label">EndDate:</label>
                    <InputDate id="enddate" @bind-Value="Transaction.EndDate" class="form-control" />
                    <ValidationMessage For="() => Transaction.EndDate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/transactions">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int TransactionId { get; set; }

    [SupplyParameterFromForm]
    private Transaction? Transaction { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Transaction ??= await context.Transaction.FirstOrDefaultAsync(m => m.TransactionId == TransactionId);

        if (Transaction is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateTransaction()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Transaction!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!TransactionExists(Transaction!.TransactionId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/transactions");
    }

    private bool TransactionExists(int transactionid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Transaction.Any(e => e.TransactionId == transactionid);
    }
}
