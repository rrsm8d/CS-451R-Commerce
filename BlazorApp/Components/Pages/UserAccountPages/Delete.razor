@page "/useraccounts/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorApp.Models
@inject IDbContextFactory<BlazorApp.Data.BlazorAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>[Debug] Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>UserAccount</h2>
    <hr />
    @if (useraccount is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@useraccount.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PasswordHash</dt>
            <dd class="col-sm-10">@useraccount.PasswordHash</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@useraccount.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@useraccount.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreationDate</dt>
            <dd class="col-sm-10">@useraccount.CreationDate</dd>
        </dl>
        <EditForm method="post" Model="useraccount" OnValidSubmit="DeleteUserAccount" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(useraccount is null)">Delete</button> |
            <a href="/useraccounts">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private UserAccount? useraccount;

    [SupplyParameterFromQuery]
    private int UserAccountId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        useraccount = await context.UserAccount.FirstOrDefaultAsync(m => m.UserAccountId == UserAccountId);

        if (useraccount is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteUserAccount()
    {
        using var context = DbFactory.CreateDbContext();
        context.UserAccount.Remove(useraccount!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/useraccounts");
    }
}
