@page "/usersettings"
@using Microsoft.EntityFrameworkCore
@using BlazorApp.Models
@inject IDbContextFactory<BlazorApp.Data.BlazorAppContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Settings</PageTitle>


@if (UserAccount is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!--
        This kinda looks like shit. I'm not quite sure how to style this
    -->
    <div class="settings-container">
        <div class="row label-container">
            <div class="">
                <EditForm method="post" Model="UserAccount" OnValidSubmit="UpdateUserAccount" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <input type="hidden" name="UserAccount.UserAccountId" value="@UserAccount.UserAccountId" />
                    <input type="hidden" name="UserAccount.PasswordHash" value="@UserAccount.PasswordHash" />
                    <input type="hidden" name="UserAccount.CreationDate" value="@UserAccount.CreationDate" />
                    <div class="mb-3">
                        <label for="email" class="form-label">New Email:</label>
                        <InputText id="email" @bind-Value="UserAccount.Email" class="form-control" />
                        <ValidationMessage For="() => UserAccount.Email" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="firstname" class="form-label">New FirstName:</label>
                        <InputText id="firstname" @bind-Value="UserAccount.FirstName" class="form-control" />
                        <ValidationMessage For="() => UserAccount.FirstName" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="lastname" class="form-label">New LastName:</label>
                        <InputText id="lastname" @bind-Value="UserAccount.LastName" class="form-control" />
                        <ValidationMessage For="() => UserAccount.LastName" class="text-danger" />
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    // Values we want to keep
    // Pulled from the hidden input values automatically.
    private int UserAccountId { get; set; }
    private DateTime CreationDate { get; set; }
    private string PasswordHash { get; set; }

    [SupplyParameterFromForm]
    private UserAccount? UserAccount { get; set; } // Not making a new UserAccount, just something to temporarily hold the model

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        // Grab cookies
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        // Convert the user ID to an int since the way the claim was implemented was jank
        UserAccountId = Int32.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value); 

        // Have the temporary UserAccount hold the old user account
        UserAccount ??= await context.UserAccount.FirstOrDefaultAsync(m => m.UserAccountId == UserAccountId);

        if (UserAccount is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateUserAccount()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(UserAccount!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            // If for some reason the ID was fucked up and doesn't exist
            if (!UserAccountExists(UserAccount!.UserAccountId))
            {
                NavigationManager.NavigateTo("notfound"); // We don't have this page lol
            }
            else
            {
                throw;
            }
        }
        //
        NavigationManager.NavigateTo("/dashboard");
    }

    private bool UserAccountExists(int useraccountid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.UserAccount.Any(e => e.UserAccountId == useraccountid);
    }
}
